
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import asyncio
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

api = "7499561329:AAEVOu2oTcRMk6jez_FcN-vtpd8eWUgh_Fw"
bot = Bot(token = api)
dp = Dispatcher(bot, storage= MemoryStorage())

kb=ReplyKeyboardMarkup(resize_keyboard=True)
but1=KeyboardButton(text='Рассчитать')
but2=KeyboardButton(text='Информация')
kb.add(but1)
kb.add(but2)



catalog_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text='Рассчитать норму калорий', сallback_data="calories")],
        [InlineKeyboardButton(text="Формулы расчёта", callback_data="formulas")]
    ]
)

class UserState(StatesGroup):
    age=State()
    growth=State()
    weight=State()


@dp.message_handler(commands=['start'])
async def starter(message):
    await message.answer('Привет! Я бот помогающий твоему здоровью.', reply_markup=kb)

@dp.message_handler(text='Рассчитать')
async def main_menu(message):
    await message.answer('Выберите опцию:', reply_markup=catalog_kb)


@dp.message_handler(text='Информация')
async def set_age2(message):
    await message.answer('Лол')


@dp.callback_query_handler(text='formulas')
async def get_formulas(call):
    await call.message.answer('для мужчин: 10 х вес (кг) + 6,25 x рост (см) – 5 х возраст (г) + 5;'
                              '\nдля женщин: 10 x вес (кг) + 6,25 x рост (см) – 5 x возраст (г) – 161')
    await call.answer()


@dp.callback_query_handler(text=['calories'])
async def set_age(call):
    await call.message.answer('Введите свой возраст:')
    await call.answer()
    await UserState.age.set()

@dp.message_handler(state=UserState.age)
async def set_growth(message, state):
    await state.update_data(age=message.text)
    await message.answer('Введите свой рост:')
    await UserState.growth.set()


@dp.message_handler(state=UserState.growth)
async def set_weigth(message, state):
    await state.update_data(growth=message.text)
    await message.answer('Введите свой вес: ')
    await UserState.weight.set()

@dp.message_handler(state=UserState.weight)
async def send_calories(message, state):
    await state.update_data(weight=message.text)
    data=await state.get_data()
    age = data['age']
    growth = data['growth']
    weight = data['weight']
    ccal=10 * int(weight) + 6.25 * int(growth) - 5 * int(age) + 5
    await message.answer(f'Ваша норма каллорий:{ccal}')
    await state.finish()



if __name__ == "__main__":
     executor.start_polling(dp, skip_updates=True)
